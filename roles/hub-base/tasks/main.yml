- name: set hostname
  hostname:
    name: "{{ system_hostname }}"
  become: true
  tags:
    base

- name: set system timezone to UTC
  timezone:
    name: UTC
  become: true
  tags:
    base

# allow password auth on AWS EC2 instances
- name: Get stats of a /etc/cloud/cloud.cfg.d dir to test for ec2 cloud env
  stat:
    path: /etc/cloud/cloud.cfg.d
  register: cloudstat

- name: Set pw auth to true in EC2 cloud.init environment
  shell: |
    echo "ssh_pwauth: true" > /etc/cloud/cloud.cfg.d/90_nrts.cfg
  become: true
  when: cloudstat.stat.isdir is defined and cloudstat.stat.isdir
  tags:
    base

# system specific tasks
- name: 
  include_tasks: "{{ ansible_facts['os_family']|lower }}_pkgs.yml"
  vars:
    is_ec2: cloudstat.stat.isdir is defined and cloudstat.stat.isdir
  tags:
    base

# NOTE: Cron not really used for base NRTS install
# Only if further configured for STATION or HUB use
- name: set cron service to running and enabled
  systemd:
    name: crond
    state: started
    enabled: yes
  become: true
  when: ansible_facts['os_family'] == "RedHat"
  tags:
    base

- name: set cron service to running and enabled
  systemd:
    name: cron
    state: started
    enabled: yes
  become: true
  when: ansible_facts['os_family'] == "Debian"
  tags:
    base
  
- name: chrony - redhat (not going to use ntpd)
  # ignore errors in case chrony not installed
  service:
    name: chronyd.service
    state: started
    enabled: yes
  become: true
  when: ansible_facts['os_family'] == "RedHat"
  ignore_errors: True
  tags:
    base


- name: chrony - debian (not going to use ntpd)
  # ignore errors in case chrony not installed
  service:
    name: chrony.service
    state: started
    enabled: yes
  become: true
  when: ansible_facts['os_family'] == "Debian"
  ignore_errors: True
  tags:
    base

- name: make sure local subnets can query ntp deamon
  lineinfile:
    path: /etc/chrony.conf
    regexp: "^ *allow *127.0.0.1"
    insertafter: "^ *allow"
    line: 'allow 127.0.0.1'
    state: present
    backup: yes
  become: true
  tags:
    base

# Additional CHRONY.CONF customizations will happen in configure step

# - name: stop and disable ntpd service
#   systemd:
#     name: ntpd.service
#     state: stopped
#     enabled: no
#   become: true
#   when: ansible_facts['os_family'] == "RedHat"
#   tags:
#     base

# - name: stop and disable ntp service
#   systemd:
#     name: ntp.service
#     state: stopped
#     enabled: no
#   become: true
#   when: ansible_facts['os_family'] == "Debian"
#   tags:
#     base

- name: Set PermitRootLogin to 'no'
  replace:
    path: /etc/ssh/sshd_config
    regexp: '^ *PermitRootLogin .* *yes'
    replace: 'PermitRootLogin no'
    backup: yes
  become: true
  tags:
    base

- name: Set PasswordAuthentication to 'yes' (the default)
  replace:
    path: /etc/ssh/sshd_config
    regexp: '^ *PasswordAuthentication +no'
    replace: '###ALLOW NRTS TUNNEL CONNECTION PasswordAuthentication no'
    backup: yes
  become: true
  tags:
    base

# - name: Set ssh_pwauth to 'true' for cloud_init cfg
#   replace:
#     path: /etc/cloud/cloud.cfg
#     regexp: '^ *ssh_pwauth: * false'
#     replace: 'ssh_pwauth: true'
#     backup: yes
#   become: true
#   tags:
#     base

# - name: clear out users to start from scratch
#   user:
#     name: "{{ item }}"
#     local: yes
#     state: absent
#     remove: yes
#   become: yes
#   loop:
#     - nrts
#     - tunnel
#   tags:
#     - usermods
#   ignore_errors: True

# - name: clean out groups to start from scratch
#   group:
#     name: "{{ item }}"
#     local: yes
#     state: absent
#   become: yes
#   loop:
#     - nrts
#     - tunnel
#   tags:
#     - usermods
#   ignore_errors: True

# - name: clean out home dirs
#   file:
#     name: "{{ home_root }}/{{ item }}"
#     state: absent
#   become: yes
#   loop:
#     - nrts
#     - tunnel
#   tags:
#     - usermods

####################################
# Generate password with python:
#   python3 -c "from passlib.hash import sha512_crypt; import getpass; print(sha512_crypt.using(rounds=5000).hash(getpass.getpass()))"
# is tcsh location system specific?
# creating tunnel user even though only used on HUB systems that use ssh remote tunnels to pull from station
# - name: Make sure user NRTS is in local user DB
#   lineinfile:
#     path: /etc/passwd
#     regexp: '^nrts:'
#     line: "nrts:x:4000:4000:NRTS System User:{{ nrts_home_dir }}:/bin/tcsh"
#   become: yes
#   tags:
#     - usermods

####################################################################
# need to do some shenanigans manually due to OD users and groups
# group 4000 tied to IGPP OG ssh group 'nrts' for ssh access to host
# NEED TO RIP THIS OUTTA HERE and make this independent of IGPP/OD
# - name: Create LOCAL nrts group (guid=4000)
#   shell:
#     lgroupadd -g 4000 nrts
#   become: yes
#   tags:
#     - usermods
####################################################################
- name: Create LOCAL NRTS Group with (guid=4000)
  ansible.builtin.group:
    name: nrts
    state: present
    gid: 4000
    local: yes
  become: yes
  tags:
    - usermods

####################################
# Generate password with python:
#   python3 -c "from passlib.hash import sha512_crypt; import getpass; print(sha512_crypt.using(rounds=5000).hash(getpass.getpass()))"
####################################################################
- name: Create LOCAL user NRTS
  ansible.builtin.user:
    name: nrts
    local: yes
    uid: 4000
    group: nrts
    home: "{{ nrts_home_dir }}"
    shell: /usr/bin/tcsh
    password: '$6$0sug.McAubwAZhjZ$DqmFIFeFirECTt2oTXsjHD2mZNs2OhNfNz/8u43HbhOekkYF82i1K3MTJwlbfFnc4jRfneW.HI.in68UqYVfc0'
    generate_ssh_key: yes
    state: present
  become: yes
  tags:
    - usermods


# - name: Create LOCAL user NRTS
#   shell: |
#     luseradd -u 4000 -d {{ nrts_home_dir }} -s /bin/tcsh -p '$6$xyyuDEOrBdwBfx.4$e0.4QB8TQk4eyWk6KiCgSIgFSIgozR7K0W0.9XyyV14fBRsWhWrxaMjrRP12/ZT6FiCkdTpWoeyVHV4apazw00' nrts
#     mkdir {{ nrts_home_dir }}/.ssh
#     ssh-keygen -t rsa -b 2048 -N '' -f {{ nrts_home_dir}}/.ssh/id_rsa
#     chown -R nrts:nrts {{ nrts_home_dir}}/.ssh
#     chmod 700 {{ nrts_home_dir }}/.ssh
#   # ansible bug in user module that inserts 'useradd' options that are unsupported by 'luseradd'
#   # user:
#   #   name: nrts
#   #   local: yes
#   #   password: '$6$xyyuDEOrBdwBfx.4$e0.4QB8TQk4eyWk6KiCgSIgFSIgozR7K0W0.9XyyV14fBRsWhWrxaMjrRP12/ZT6FiCkdTpWoeyVHV4apazw00'
#   #   state: present
#   #   home: "{{ nrts_home_dir }}"
#   #   shell: /bin/tcsh
#   #   generate_ssh_key: yes
#   become: yes
#   tags:
#     - usermods

- name: Create LOCAL user TUNNEL
  ansible.builtin.user:
    name: tunnel
    local: yes
    password: '$6$2HD/LDqZQW8pofXt$Frj9Fos6VJBT12e/NTeyd3kQdEGH4drWDSBETxx2OifFk215rBr9Ta0xdHcER.O.u/aQ3xI.OXaDZbBkxpeIy0'
    state: present
    home: "{{ home_root }}/tunnel"
    groups: nrts
    shell: /sbin/nologin
    generate_ssh_key: yes
  become: yes
  tags:
    - usermods


####################################################################
# need to do some shenanigans manually due to OD users and groups
# group 4000 tied to IGPP OG ssh group 'nrts' for ssh access to host
# NEED TO RIP THIS OUTTA HERE and make this independent of IGPP/OD
# - name: Assign users NRTS and TUNNEL to group NRTS (guid = 4000)
#   shell: lusermod -g 4000 {{ item }}
#   become: yes
#   loop:
#     - nrts
#     - tunnel
#   tags:
#     - usermods
####################################################################

# requires nrts_home_dir
- name: Set mode on NRTS home dir
  file:
    name: "{{ nrts_home_dir }}"
    state: directory
    mode: 02755
    owner: nrts
    group: nrts
  become: yes
  tags:
    - usermods

# requires nrts_home_dir
- name: install custom nrts sudoers conf file
  template:
    src: nrts-sudoers.{{ ansible_facts['os_family']|lower }}.j2
    dest: /etc/sudoers.d/nrts
    owner: root
    group: root
    mode: 0644
    backup: yes
  become: true

- name: update perms on homedirs
  file:
    path: "{{ home_root }}/{{ item }}"
    state: directory
    owner: "{{ item }}"
    group: "{{ item }}"
    mode: "g+rx"
  become: true
  tags:
    nrtsbuild
  loop:
    - nrts
    - tunnel

# requires nrts_home_dir 
# MAY NEED TO CUSTOMIZE FOR DEBIAN
- name: install custom NRTS rsyslog conf
  template:
    src: nrts-rsyslog.j2
    dest: /etc/rsyslog.d/nrts.conf
    owner: root
    group: root
    mode: 0644
    backup: yes
  become: true

# MAY NEED TO CUSTOMIZE FOR DEBIAN
- name: make sure rsyslogd running and enabled with nrts custom conf
  systemd:
    name: rsyslog
    state: restarted
    enabled: yes
  become: true

- name: build nrts software
  import_tasks: nrtsbuild.yml
  vars:
    build_root: "{{ nrts_home_dir }}"
    deploy_root: "{{ nrts_home_dir }}"
  become: true
  tags:
    nrtsbuild

- name: build 3rd party (IRIS) miniseed utilities
  import_tasks: miniseed_utils.yml
  vars:
    build_root: "/usr/local/src"
    deploy_root: "/usr/local/bin"
    ringserver_location: "{{ nrts_home_dir }}"
  tags:
    - miniseed

# requires nrts_home_dir 
- name: set NRTS_HOME in systemd nrts.service file and install
  template:
    src: nrts.service_template.j2
    dest: /etc/systemd/system/nrts.service
    owner: root
    group: root
    mode: 0644
    backup: yes
  become: true

- name: install vim-plug
  ansible.builtin.shell: curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  become_user: nrts
  become: yes

- name: install vim plugins
  ansible.builtin.shell: vim +'PlugInstall --sync' +qa
  become_user: nrts
  become: yes
